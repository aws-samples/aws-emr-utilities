# Default values for ranger.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
extraLabels: {}

server:
  replicaCount: 1
  image:
    repository: melodydocker/ranger-admin
    tag: latest
    pullPolicy: IfNotPresent

  # Network configuration
  service:
    type: ClusterIP
    annotations: {}
  
  ## Configure liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  #readinessProbe:
  #  httpGet:
  #    path: /
  #    port: http
  #  initialDelaySeconds: 60
  #  periodSeconds: 15
  #  timeoutSeconds: 10
  #livenessProbe:
  #   httpGet:
  #     path: /
  #     port: http
  #   initialDelaySeconds: 60
  #   periodSeconds: 30
  #   timeoutSeconds: 10

  resources: {}
  # requests:
  #   cpu: "100m"
  #   memory: "256Mi"
  # limits:
  #   cpu: "500m"
  #   memory: "512Mi"
  nodeSelector: {}
  podAnnotations: {} 
  annotations: {}

usersync:
  replicaCount: 1
  image:
    repository: melodydocker/ranger-usersync
    tag: latest
    pullPolicy: IfNotPresent

  # Network configuration
  service:
    type: ClusterIP
    annotations: {}
  
  podAnnotations: {} 
  annotations: {}
  nodeSelector: {}
  resources: {}
  # requests:
  #   cpu: "100m"
  #   memory: "256Mi"
  # limits:
  #   cpu: "500m"
  #   memory: "512Mi"

postgres:
  replicaCount: 1
  image:
    repository: postgres
    tag: 16.3
    pullPolicy: IfNotPresent

  resources:
    requests:
      memory: 256Mi
      cpu: 100m

  service:
    type: ClusterIP
    annotations: {}

  livenessProbe:
    exec:
      command:
      - sh
      - -c
      - exec pg_isready --host=$POD_IP
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    exec:
      command:
      - sh
      - -c
      - exec pg_isready --host=$POD_IP
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3  

  env:
    PGDATA: /usr/lib/postgresql/data
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST_AUTH_METHOD: md5
    POSTGRES_INITDB_ARGS: "--auth-host=md5"

  ## PostgreSQL configuration
  ## Specify runtime configuration parameters as a dict, using camelCase, e.g.
  ## {"sharedBuffers": "500MB"}
  ## Alternatively, you can put your postgresql.conf under the postgresql/ directory
  ## ref: https://www.postgresql.org/docs/current/static/runtime-config.html
  ##
  # config:
  ## PostgreSQL client authentication configuration
  ## Specify content for pg_hba.conf
  ## Default: do not create pg_hba.conf
  ## Alternatively, you can put your pg_hba.conf under the files/ directory
  # pghba: |-
  #   local all all trust
  #   host all all localhost md5
  #   host all all ranger-postgresdb-0 md5
  #initdbscripts: |-
    #!/bin/sh
    #echo "helloworld"

  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 10Gi
    ## database data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS)
    ##
    # storageClass: "-"
    existingClaim: null

  podAnnotations: {}
  nodeSelector: {}
  tolerations: [] 
  annotations: {}
  strategy: {}

es:
  replicaCount: 1
  image:
    repository: elasticsearch
    tag: 7.5.0
    pullPolicy: IfNotPresent
  env:
    ELASTIC_PASSWORD: elasticsearch
    ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    discovery.type: single-node 

  # Network configuration
  service:
    type: ClusterIP
    annotations: {}

  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 8Gi
    ## database data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS)
    ##
    # storageClass: "-"
    existingClaim: ""

  strategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0
  #
  # or
  #
  # type: Recreate
  # rollingUpdate: null
  annotations: {}
  podAnnotations: {}